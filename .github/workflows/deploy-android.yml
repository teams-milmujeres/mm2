name: Deploy - Production - Android

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Describe the changes in this release'
        required: true
      version_name:
        description: 'Enter the version name ej. 1.0.0'
        required: true
jobs:
   build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          architecture: 'x64'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.5'

      - name: Install Codemagic CLI tools
        run: |
          python3 -m pip install codemagic-cli-tools
          sudo gem install xcodeproj
        
      - name: Get signing key
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > ${{ github.workspace }}/android-keystore.jks

      - name: Get Google Service Account Json
        run: |
          echo "${{ secrets.API_GOOGLECLOUD_APPS_JSON }}" | base64 --decode > ${{ github.workspace }}/api-googlecloud-apps.json

      - name: Create key.properties
        run: |
          echo "storeFile=${{ github.workspace }}/android-keystore.jks" > ${{ github.workspace }}/android/key.properties
          echo "storePassword=${{ secrets.KEY_PASSWORD }}" >> ${{ github.workspace }}/android/key.properties
          echo "keyAlias=${{ vars.KEY_ALIAS }}" >> ${{ github.workspace }}/android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> ${{ github.workspace }}/android/key.properties

      # - name: Get Build ID Number
      #   run: | 
      #     build_number=$(google-play get-latest-build-number \
      #       --package ${{ vars.APPLICATION_ID }} \
      #       --credentials @file:${{ github.workspace }}/api-googlecloud-apps.json \
      #       --track internal)
      #     echo "BUILD_NUMBER=$((build_number + 1))" >> $GITHUB_ENV
      #   working-directory: android

      - name: Get Build ID Number
        run: | 
          build_number=$(google-play get-latest-build-number \
            --package ${{ vars.APPLICATION_ID }} \
            --credentials @file:${{ github.workspace }}/api-googlecloud-apps.json)
          echo "BUILD_NUMBER=$((build_number + 1))" >> $GITHUB_ENV
        working-directory: android

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          flutter-version: '3.32.0'
      
      - name: Clean Gradle cache
        run: rm -rf ~/.gradle/caches

      - name: Clean Flutter build
        run: flutter clean

      - name: Install dependencies
        run: flutter packages pub get
        
      - name: Clean and get dependencies
        run: |
          flutter clean
          flutter pub get

      - name: Install Localizations
        run:
          flutter gen-l10n

      - name: Generate icons
        run:
          flutter pub run flutter_launcher_icons
   
      # - name: Build Flutter app
      #   run: |
      #     flutter build appbundle --release --build-number $BUILD_NUMBER \
      #     --dart-define=flutter.versionName=${{ github.event.inputs.version_name }} \
      #     --target-platform android-arm,android-arm64
      #   env:
      #     FCI_KEYSTORE_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      #     FCI_KEY_ALIAS: ${{ vars.KEY_ALIAS }}
      #     FCI_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      #     CI: ${{ vars.CI }}

      - name: Build Flutter app
        run: |
          flutter build appbundle \
            --release \
            --build-number $BUILD_NUMBER \
            --build-name ${{ github.event.inputs.version_name }} \
            --target-platform android-arm,android-arm64
        env:
          FCI_KEYSTORE_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          FCI_KEY_ALIAS: ${{ vars.KEY_ALIAS }}
          FCI_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          CI: ${{ vars.CI }}

      - name: Rename app bundle
        run: |
          mv ${{ github.workspace }}/build/app/outputs/bundle/release/app-release.aab \
              ${{ github.workspace }}/build/app/outputs/bundle/release/app-release-${{ github.event.inputs.version_name }}.aab

      - name: Generate APK
        run: |
          android-app-bundle build-universal-apk --bundle ${{ github.workspace }}/build/app/outputs/bundle/release/app-release-${{ github.event.inputs.version_name }}.aab --ks ${{ github.workspace }}/android-keystore.jks --ks-pass ${{ secrets.KEY_PASSWORD }} --ks-key-alias ${{ vars.KEY_ALIAS }} --key-pass ${{ secrets.KEY_PASSWORD }}

      - name: Rename APK
        run: |
          mv ${{ github.workspace }}/build/app/outputs/bundle/release/app-release-${{ github.event.inputs.version_name }}-universal.apk \
            ${{ github.workspace }}/build/app/outputs/bundle/release/app-universal-${{ github.event.inputs.version_name }}.apk


      - name: Move package to publish
        run: |
          mkdir -p ${{ github.workspace }}/package/
          find ${{ github.workspace }}/build/ -type f \( -name "*.aab" -o -name "*.apk*" -o -name "protectionreport.html" \) -exec mv {} ${{ github.workspace }}/package/ \;
        continue-on-error: true
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: ${{ github.workspace }}/package/
          retention-days: 14
        continue-on-error: true

   publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Get Google Service Account Json
        run: |
          echo "${{ secrets.API_GOOGLECLOUD_APPS_JSON }}" | base64 --decode > ${{ github.workspace }}/api-googlecloud-apps.json
      
      - name: Retrieve saved App Bundle
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: ${{ github.workspace }}/package/
          
      - name: Publish App Bundle
        uses: r0adkll/upload-google-play@v1
        with:
          releaseFiles: ${{ github.workspace }}/package/app-release-${{ github.event.inputs.version_name }}.aab
          serviceAccountJson: ${{ github.workspace }}/api-googlecloud-apps.json
          packageName: ${{ vars.APPLICATION_ID }}
          track: internal

      - name: Create or Update Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Esto permite que gh CLI se autentique
        run: |
          TAG_NAME="${GITHUB_REF_NAME}-v${{ github.event.inputs.version_name }}"
          
          # Verificar si release existe
          EXISTING=$(gh release view "$TAG_NAME" --repo $GITHUB_REPOSITORY --json id -q ".id" || echo "")
          
          if [ -z "$EXISTING" ]; then
            echo "Release no existe, creando..."
            gh release create "$TAG_NAME" \
              --title "Release ${GITHUB_REF_NAME} - Version ${{ github.event.inputs.version_name }}" \
              --notes "${{ github.event.inputs.release }}"
          else
            echo "Release ya existe (ID $EXISTING), se actualizar√°..."
            gh release edit "$TAG_NAME" \
              --title "Release ${GITHUB_REF_NAME} - Version ${{ github.event.inputs.version_name }}" \
              --notes "${{ github.event.inputs.release }}"
          fi

      - name: Upload Appbundle
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${GITHUB_REF_NAME}-v${{ github.event.inputs.version_name }}"
          gh release upload "$TAG_NAME" "${GITHUB_WORKSPACE}/package/app-release-${{ github.event.inputs.version_name }}.aab" --clobber

      - name: Upload APK
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${GITHUB_REF_NAME}-v${{ github.event.inputs.version_name }}"
          gh release upload "$TAG_NAME" "${GITHUB_WORKSPACE}/package/app-universal-${{ github.event.inputs.version_name }}.apk" --clobber
