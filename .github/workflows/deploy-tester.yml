name: Upload App Mil Mujeres to tester

on:
  #push:
  #  branches:
  #    - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de despliegue'
        required: true
        default: 'test2'
        type: choice
        options:
          - 'test1'
          - 'test2'
          - 'city'
          - 'official'

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.0'
          cache: true

      - name: Definir variables de entorno (API_URL y DEPLOY_PATH)
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Ambiente: master (push)"
            echo "DEPLOY_PATH=/home/testermm/www/appoficial/" >> $GITHUB_ENV
            echo "API_URL=$(grep TEST_API_URL .env | cut -d'=' -f2)" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.environment }}" in
              "test1")
                echo "DEPLOY_PATH=/home/testermm/www/appweb1/" >> $GITHUB_ENV
                echo "API_URL=$(grep TEST1_API_URL .env | cut -d'=' -f2)" >> $GITHUB_ENV
                ;;
              "test2")
                echo "DEPLOY_PATH=/home/testermm/www/appweb2/" >> $GITHUB_ENV
                echo "API_URL=$(grep TEST2_API_URL .env | cut -d'=' -f2)" >> $GITHUB_ENV
                ;;
              "city")
                echo "DEPLOY_PATH=/home/testermm/www/appcity/" >> $GITHUB_ENV
                echo "API_URL=$(grep CITY_API_URL .env | cut -d'=' -f2)" >> $GITHUB_ENV
                ;;
              "official")
                echo "DEPLOY_PATH=/home/testermm/www/appoficial/" >> $GITHUB_ENV
                echo "API_URL=$(grep PROD_API_URL .env | cut -d'=' -f2)" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Limpiar y obtener dependencias
        run: |
          rm -rf ~/.gradle/caches
          flutter clean
          flutter pub get

      - name: Generar localizaciones
        run: flutter gen-l10n

      - name: Generar Ã­conos
        run: flutter pub run flutter_launcher_icons

      - name: Generar splash screen
        run: flutter pub run flutter_native_splash:create

      - name: Compilar Flutter Web
        env:
          API_URL: ${{ env.API_URL }}
        run: |
          echo "Usando API_URL=${{ env.API_URL }}"
          flutter build web --release --dart-define=API_URL=${{ env.API_URL }}

      - name: Decode SSH key
        run: |
          mkdir -p ${{ github.workspace }}/.ssh
          echo "${{ secrets.SERVER_SSH_KEY_BASE64 }}" | base64 --decode > ${{ github.workspace }}/.ssh/id_ed25519
          chmod 600 ${{ github.workspace }}/.ssh/id_ed25519
          echo "Archivo SSH creado en ${{ github.workspace }}/.ssh/id_ed25519"
      
      - name: Limpiar carpeta/subir archivos al servidor
        env:
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_KEY_BASE64: ${{ secrets.SERVER_SSH_KEY_BASE64 }}
          
        run: |
          npm install node-ssh
          echo "Limpiando y copiando archivos a $DEPLOY_PATH"
          node .github/scripts/copy-files-ssh.js
